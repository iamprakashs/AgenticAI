from typing import Annotated
from langgraph.graph.message import add_messages
from pydantic import BaseModel, Field
from typing import Literal, Optional, List
import json
import operator

RiskLevel = Literal['high', 'low', 'unclear']

DefenceCapabilityLevel = Literal['high', 'low', 'unclear']

class Questions(BaseModel):
    questions: list[str] = Field(description="A list of questions to be asked", default_factory=list)
    answers: dict[str, str] = Field(description="A list of questions and their answers", default_factory=dict)

    def __repr__(self):
        return json.dumps(self.model_dump(), indent=4)

class Options(BaseModel):
    choices_made: Annotated[dict[str, str], operator.add] = Field(description="A list of choices and their selection - only include choices that have been made, do not include null or empty values", default_factory=dict)
    last_choice: Optional[str] = Field(description="The last choice made by the user.", default=None)
    def __repr__(self):
        return json.dumps(self.model_dump(), indent=4)

class RiskAnalysis(BaseModel):
    message: str = Field(description="The justification for selecting the level of risk.")
    assessment: str = Field(description="The assement leading to the level of risk given.")
    risk_level: RiskLevel = Field(description="The level of risk: low, high or unclear.")
    questions: Questions = Field(description="A list of questions to clarify the level of risk.", default_factory=Questions)
    choice: Options = Field(description="A prompt and options for the user to make a choice.", default_factory=Options)

    def __repr__(self):
        return json.dumps(self.model_dump(), indent=4)

class DefenceAnalysis(BaseModel):
    message: str = Field(description="The justification for selecting the level of capability.")
    assessment: str = Field(description="The assement leading to the level of capability given.")
    capability_level: DefenceCapabilityLevel = Field(description="The level of capability: low, high or unclear.")
    questions: Questions = Field(description="A list of questions to clarify the level of capability.", default_factory=Questions)
    choice: Options = Field(description="A prompt and options for the user to make a choice.", default_factory=Options)

    def __repr__(self):
        return json.dumps(self.model_dump(), indent=4)

class LeavePlan(BaseModel):
    plan_status: Optional[str] = Field(description="The status of the leave plan: more or done.")
    questions: Questions = Field(description="A list of questions to clarify the information for the plan.", default_factory=Questions)
    when_to_leave: Optional[str] = Field(description="When to leave our home before the bushfire arrives.")
    where_to_go: Optional[str] = Field(description="Where to go when leaving our home due to a bushfire.")
    how_to_get_there: Optional[str] = Field(description="How to get to the destination due to a bushfire.")
    what_to_take: Optional[str] = Field(description="What to take when we leave due to a bushfire.")
    who_to_tell: Optional[str] = Field(description="Who to tell when we leave due to a bushfire and when we are safe.")
    backup_plan: Optional[str] = Field(description="A backup plan to use if we are unable to leave due to a bushfire.")

    def __repr__(self):
        return json.dumps(self.model_dump(), indent=4)

class StayPlan(BaseModel):
    plan_status: Optional[str] = Field(description="The status of the stay plan: more or done.")
    questions: Questions = Field(description="A list of questions to clarify the information for the plan.", default_factory=Questions)
    when_to_start: Optional[str] = Field(description="When to start defending our home before the bushfire arrives.")
    before_the_fire: Optional[str] = Field(description="What to do before the bushfire arrives.")
    during_the_fire: Optional[str] = Field(description="What to do during the bushfire.")
    after_the_fire: Optional[str] = Field(description="What to do after the bushfire has passed.")
    who_can_help: Optional[str] = Field(description="Who can help defend our home during a bushfire.")
    peoples_roles: Optional[str] = Field(description="What each person will do during a bushfire.")
    backup_plan: Optional[str] = Field(description="A backup plan to use if we are unable to defend our home due to a bushfire.")
    def __repr__(self):
        return json.dumps(self.model_dump(), indent=4)

class PlanOutput(BaseModel):
    content: List[str] = Field(description="The complete bushfire leave plan as a list of strings", default_factory=list)

class GraphState(BaseModel):
    # the next node to go to
    next: Optional[str] = None
    user_motivation: Optional[str] = None

    # track messages generated by the LLM
    messages: Optional[Annotated[list, add_messages]] = Field(description="A list of messages generated by the LLM.", default_factory=list)

    # track the overall risk assessment status
    risk_assessment: Optional[RiskAnalysis] = None
    defence_assessment: Optional[DefenceAnalysis] = None
    leave_plan: Optional[LeavePlan] = None
    stay_plan: Optional[StayPlan] = None
    final_plan: PlanOutput = Field(description="The final bushfire plan.", default_factory=PlanOutput)
    
    def __repr__(self):
        return json.dumps(self.model_dump(), indent=4)